// Generated by CoffeeScript 1.7.1
(function() {
  var Q, fs, getlistOfDotDesktop, glob, ofs, parseData, path, readFiles, result;

  path = require("path");

  glob = require("glob");

  fs = require("q-io/fs");

  ofs = require("fs");

  Q = require("q");

  getlistOfDotDesktop = function(_path) {
    var deferred, pattern;
    pattern = path.resolve("" + _path + "/**/*.desktop");
    deferred = Q.defer();
    glob(pattern, function(err, data) {
      var output;
      if (err) {
        deferred.reject(err);
      }
      output = {
        dir: _path,
        paths: data
      };
      return deferred.resolve(output);
    });
    return deferred.promise;
  };

  readFiles = function(input) {
    var deferred, fileNameBeginIndex, filename, nameList, p, promiseArr, _i, _len, _ref;
    deferred = Q.defer();
    promiseArr = [];
    nameList = [];
    _ref = input['paths'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      p = _ref[_i];
      fileNameBeginIndex = p.lastIndexOf("/") + 1;
      filename = p.slice(fileNameBeginIndex);
      nameList.push(filename);
      promiseArr.push(fs.read(p));
    }
    Q.all(promiseArr).then(function(data) {
      var d, j, obj, _j, _len1;
      obj = {};
      for (j = _j = 0, _len1 = data.length; _j < _len1; j = ++_j) {
        d = data[j];
        obj[nameList[j]] = d;
      }
      return deferred.resolve(obj);
    });
    return deferred.promise;
  };

  parseData = function(input) {
    var deferred, domain, eqIndex, k, ks, lhs, line, lines, outObj, outputArray, rhs, _i, _j, _len, _len1;
    deferred = Q.defer();
    ks = Object.keys(input);
    outputArray = [];
    for (_i = 0, _len = ks.length; _i < _len; _i++) {
      k = ks[_i];
      domain = "";
      outObj = {};
      outObj[k] = {};
      lines = input[k].split("\n");
      for (_j = 0, _len1 = lines.length; _j < _len1; _j++) {
        line = lines[_j];
        if (line === '' || line[0] === '#') {
          continue;
        }
        if (line[0] === '[' && line.indexOf(']') !== 1) {
          domain = line.slice(1, line.indexOf(']'));
          outObj[k][domain] = {};
        } else {
          eqIndex = line.indexOf("=");
          lhs = line.slice(0, eqIndex);
          rhs = line.slice(eqIndex + 1);
          outObj[k][domain][lhs] = rhs;
        }
      }
      outputArray.push(outObj);
    }
    deferred.resolve(outputArray);
    return deferred.promise;
  };

  result = getlistOfDotDesktop("/usr/share/applications").then(readFiles).then(parseData);

  module.exports = result;

}).call(this);

//# sourceMappingURL=index.map
